# Задача 1. Написать программу, которая будет складывать, вычитать, умножать или
# делить два числа. Числа и знак операции вводятся пользователем. После
# выполнения вычисления программа не должна завершаться, а должна запрашивать
# новые данные для вычислений. Завершение программы должно выполняться при вводе
# символа '0' в качестве знака операции. Если пользователь вводит неверный знак
# (не "0", "+", "-", "*", "/"), то программа должна сообщать ему об ошибке и
# снова запрашивать знак операции. Также сообщать пользователю о невозможности
# деления на ноль, если он ввел 0 в качестве делителя.'''


# def calc():
#     operation = input("Введите математическую операцию или 0 если хотите завершить программу: ")
#     if operation == "0":
#         print("все кончилось")
#     else:
#         try:
#             x = int(input("Введите первое число: "))
#             y = int(input("Введите второе число: "))
#         except ValueError:
#             print("Вы ввели не число - перевведите")
#             calc()
#         else:
#             if operation == '+':
#                 print(f'{x} {operation} {y} = {x + y}')
#                 calc()
#             elif operation == '-':
#                 print(f'{x} {operation} {y} = {x - y}')
#                 calc()
#             elif operation == '*':
#                 print(f'{x} {operation} {y} = {x * y}')
#                 calc()
#             elif operation == '/':
#                 try:
#                     print(f'{x} {operation} {y} = {x / y}')
#                 except ZeroDivisionError:
#                     print('Ошибка. Деление на ноль')
#                     calc()
#             else:
#                 print("Введен неверный оператор - перевведите")
#                 calc()
        
# calc()

# Задание 2. Подсчитать четные и нечетные цифры введенного натурального числа.
# Например, если введено число 34560, то у него 3 четные цифры
# (4, 6 и 0) и 2 нечетные (3 и 5).
# Подсказка:
# На каждом шаге вам нужно 'доставать' из числа очередную цифру
# и смотреть является ли она четной или нечетной.
# При этом увеличиваем соответствующий счетчик
# Пока все числа не извлечены, рекурсивные вызовы продолжаем
# Условие завершения рекурсии - все числа извлечены
# Используем операции % //. Операции взятия по индексу применять нельзя.
# Решите через рекурсию. В задании нельзя применять циклы.
# Пример:
# Введите число: 123
# Количество четных и нечетных цифр в числе равно: (1, 2)


# def count(n):
#     even = 0
#     odd = 0
#     i = int(f)
#     if i % 2 == 0:
#         even += 1
#     else:
#         odd += 1
# print(f'У числа {number}: четных цифр - {even}, нечетных - {odd} ')



# try:
#     x = int(input("Введите число делимое: "))
# except ValueError:
#     print("Формат ввода не соответствует")
# else:
#     print(count(x))

# Задание 2. Подсчитать четные и нечетные цифры введенного натурального числа.
# Например, если введено число 34560, то у него 3 четные цифры
# (4, 6 и 0) и 2 нечетные (3 и 5).
# Подсказка:
# На каждом шаге вам нужно 'доставать' из числа очередную цифру
# и смотреть является ли она четной или нечетной.
# При этом увеличиваем соответствующий счетчик
# Пока все числа не извлечены, рекурсивные вызовы продолжаем
# Условие завершения рекурсии - все числа извлечены
# Используем операции % //. Операции взятия по индексу применять нельзя.
# Решите через рекурсию. В задании нельзя применять циклы.
# Пример:
# Введите число: 123
# Количество четных и нечетных цифр в числе равно: (1, 2)



# def even_odd(n, even, odd):
#     if n == 0:
#         return even, odd
#     elif n % 2 == 0:   
#         even += 1
        
#         return even_odd(n // 10, even, odd)
#     else:
#         odd += 1
        
#         return even_odd(n // 10, even, odd)

        

# try:
#     a = int(input("Введите тестируемое число: "))
# except ValueError:
#     print("Формат ввода не соответвует")
# else:
#     print(even_odd(a, 0, 0))

# Задание 3. Сформировать из введенного числа
# обратное по порядку входящих в него
# цифр и вывести на экран. Например, если введено число 3486,
# то надо вывести число 6843.
# Подсказка:
# На каждом шаге вам нужно 'доставать' из числа очередную цифру
# Пока все числа не извлечены рекурсивные вызовы продолжаем
# Условие завершения рекурсии - все цифры извлечены
# Используем операции % //. Операции взятия по индексу применять нельзя.
# Решите через рекурсию. В задании нельзя применять циклы.
# Пример:
# Введите число, которое требуется перевернуть: 123
# Перевернутое число: 321
# Не забудьте проверить на числе, которое оканчивается на 0.
# 1230 -> 0321

# def invert(n, m):
#     if n == 0:
#         return m
#     else:
#         m = m*10 + n%10
        
#     return invert (n//10, m)
    

# try:
#     a = int(input("Введите тестируемое число: "))
# except ValueError:
#     print("Формат ввода не соответвует")
# else:
#     print(invert(a, 0))

# Задание 4. Найти сумму n элементов следующего ряда чисел:
# 1 -0.5 0.25 -0.125 ...
# Количество элементов (n) вводится с клавиатуры.
# Пример:
# Введите количество элементов: 3
# Количество элементов - 3, их сумма - 0.75
# Решите через рекурсию. В задании нельзя применять циклы.
# Нужно обойтисть без создания массива!

# def sumrow(n, k, m):
    
#     if n == 0:
#         return m
#     else:
       
#        m = m + k
#        k = k * -0.5
#     return sumrow(n - 1, k, m)
        

# try:
#     a = int(input("Введите тестируемое число: "))
# except ValueError:
#     print("Формат ввода не соответвует")
# else:
#     z = sumrow(a, 1, 0 )
#     print(f"Число попыток {a} сумма {z}")
    
# Задание 7. Напишите программу, доказывающую или проверяющую, что для множества
# натуральных чисел выполняется равенство: 1+2+...+n = n(n+1)/2,
# где n - любое натуральное число.
# Пример:
# для n = 5
# 1+2+3+4+5 = 5(5+1)/2
# Нужно написать рекурсивную ф-цию только для левой части выражения!
# Результат нужно сверить с правой частью.
# Правой части выражения в рекурсивной ф-ции быть не должно!
# Решите через рекурсию. В задании нельзя применять циклы.


# def evidence(n, m):
#     if n == 0:
#         return m
#     else:    
#         return evidence(n - 1, m + n)
        
# try:
#     a = int(input("Введите тестируемое число: "))
# except ValueError:
#     print("Формат ввода не соответвует")
# else:
#     z = (evidence(a, 0))
#     print(f"Левая сторона = {z}")

# w = a * (a + 1) / 2
# print(f"Правая сторона = {w}")

# if w ==  z:
#     print("Утверждение верно")
# else:
#     print("Утверждение не верно")
    

# Задание 6. В программе генерируется случайное целое число от 0 до 100.
# Пользователь должен его отгадать не более чем за 10 попыток. После каждой
# неудачной попытки должно сообщаться больше или меньше введенное пользователем
# число, чем то, что загадано. Если за 10 попыток число не отгадано,
# то вывести загаданное число.
# Решите через рекурсию. В задании нельзя применять циклы.

# def guess(n, m):
#     if m == 0:
#         print(f"Угадать не получилось. Загадано {n}")
#         return n
#     else:
#         y = int(input("Введите случайное число от 0 до 100: "))
#         if n == y:
#             print(f"Вы отгадали. Загаданное число {y}")
#         elif n > y:
#             print("больше")
#             guess(n, m - 1)
#         else:
#             n < y
#             print("меньше")
#             guess(n, m - 1)


# try:
#     a = int(input("Введите случайное число: "))
# except ValueError:
#     print("Формат ввода не соответствует")
# else:
#     z = guess(a, 3)

# Задача 26: Напишите программу, которая на вход принимает два числа A и B, 
# и возводит число А в целую степень B с помощью рекурсии.
# *Пример:*
# A = 3; B = 5 -> 243 (3⁵)
#     A = 2; B = 3 -> 8 


# def expon(a, b):
#     if b == 0:
#         return 1
#     return a * expon(a, b - 1)

# try:
#     a = int(input("Введите множимое основание: "))
#     b = int(input("Введите множитель: "))
# except ValueError:
#     print("Формат ввода не соответствует")
# else:
#     print(f" Результат {a} в степени {b} = {expon(a, b)}")

# Задача 28: Напишите рекурсивную функцию sum(a, b), возвращающую сумму двух целых 
# неотрицательных чисел. Из всех арифметических операций допускаются
# только +1 и -1. Также нельзя использовать циклы.
# *Пример:*
# 2 2
#     4 

def sum_digit(a, b):
    if b == 0:
        return a
    return sum_digit(a + 1, b - 1)

try:
    a = int(input("Введите первое число: "))
    b = int(input("Введите второе число: "))
except ValueError:
    print("Формат ввода не соответствует")
else:
    print(f"Возвращенная сумма чисел: {sum_digit(a, b)}")